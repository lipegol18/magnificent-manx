/**
 * Debug espec√≠fico para extra√ß√£o de nome do RG da Juliana (RS)
 */

console.log('=== DEBUG JULIANA RG - EXTRA√á√ÉO DE NOME ===\n');

// Texto OCR simulado baseado nos logs anteriores para RG RS
const textoJulianaRS = `16/SET/2016
V√ÅLIDA EM TODO O TERRIT√ìRIO NACIONAL
REGISTRO 7.753.319
GERAL
NOME
FILIA√á√ÉO
DATA DE
EXPEDI√á√ÉO
JULIANA COSTA DA SILVA
SERGIO LUIZ ALVES DA SILVA
MARA REGINA COSTA DA SILVA
NATURALIDADE
DATA DE NASCIMENTO
PORTO ALEGRE RS
DOC. ORIGEM
11/11/1984`;

console.log('üìÑ TEXTO OCR JULIANA (RS):');
console.log(textoJulianaRS);
console.log('\nüìä AN√ÅLISE:');
console.log('Linhas:', textoJulianaRS.split('\n').length);

// Testar padr√µes de nome atuais
const nomePatterns = [
  {
    name: 'Padr√£o 1: Nome ap√≥s NOME',
    regex: /NOME[\s\n]*([A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á\s]+?)[\s\n]*(?:FILIACAO|FILIA√á√ÉO|DATA|NATURALIDADE|CPF)/i
  },
  {
    name: 'Padr√£o 2: Nome antes FILIA√á√ÉO',
    regex: /([A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]{3,}\s+[A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]{3,}\s+[A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]{3,}[A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á\s]*)[\s\n]*FILIA√á√ÉO/i
  },
  {
    name: 'Padr√£o 3: Entre EXPEDI√á√ÉO e FILIA√á√ÉO',
    regex: /(?:EXPEDI√á√ÉO|DATA\s+DE\s+EXPEDI√á√ÉO)[\s\n]+(?:\d{2}\/\d{2}\/\d{4}[\s\n]+)?([A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]{3,}\s+[A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]{3,}\s+[A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]{3,}[A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á\s]*)[\s\n]+(?:FILIA√á√ÉO|SERGIO|MARA)/i
  },
  {
    name: 'Padr√£o 4: Nome isolado em linha',
    regex: /^([A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]{3,}\s+[A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]{3,}\s+[A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]{3,}[A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á\s]*)$/m
  }
];

console.log('\nüîç TESTE DOS PADR√ïES:');
nomePatterns.forEach((pattern, index) => {
  console.log(`\n${pattern.name}:`);
  const match = textoJulianaRS.match(pattern.regex);
  if (match) {
    console.log(`  ‚úÖ Match: "${match[1]}"`);
    console.log(`  üßπ Limpo: "${match[1].trim()}"`);
  } else {
    console.log('  ‚ùå Sem match');
  }
});

// Teste de padr√£o espec√≠fico para o caso atual
console.log('\nüéØ PADR√ïES ESPEC√çFICOS PARA JULIANA:');

const padraoJuliana = /^(JULIANA\s+COSTA\s+DA\s+SILVA)$/m;
const matchJuliana = textoJulianaRS.match(padraoJuliana);
console.log('Padr√£o direto JULIANA:', matchJuliana ? `"${matchJuliana[1]}"` : 'Sem match');

// Buscar linha por linha
console.log('\nüìã AN√ÅLISE LINHA POR LINHA:');
const linhas = textoJulianaRS.split('\n').map(linha => linha.trim()).filter(linha => linha.length > 0);
linhas.forEach((linha, index) => {
  const isNome = /^[A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]{3,}\s+[A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]{3,}\s+[A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]{3,}/.test(linha);
  console.log(`${index + 1}. "${linha}" ${isNome ? 'üë§ POSS√çVEL NOME' : ''}`);
});

console.log('\nüí° RECOMENDA√á√ïES:');
console.log('1. Padr√£o simples: linha que cont√©m exatamente "JULIANA COSTA DA SILVA"');
console.log('2. Verificar se o texto OCR real est√° diferente do simulado');
console.log('3. Adicionar padr√£o espec√≠fico para capturar nome em linha isolada');
console.log('4. Considerar que nomes podem estar separados em linhas m√∫ltiplas');