/**
 * An√°lise da diferen√ßa de formata√ß√£o de texto entre m√©todo novo e antigo
 * Investigando se o texto OCR vem em formato diferente
 */

console.log('=== AN√ÅLISE: FORMATA√á√ÉO DE TEXTO OCR ===\n');

// Baseado nos logs recentes - formato do m√©todo antigo (com quebras de linha)
const textoMetodoAntigo = `16/SET/2016
V√ÅLIDA EM TODO O TERRIT√ìRIO NACIONAL
REGISTRO 7.753.319
GERAL
NOME
FILIA√á√ÉO
DATA DE
EXPEDI√á√ÉO
JULIANA COSTA DA SILVA
SERGIO LUIZ ALVES DA SILVA
MARA REGINA COSTA DA SILVA
NATURALIDADE
DATA DE NASCIMENTO
PORTO ALEGRE RS
DOC. ORIGEM
11/11/1984`;

// Formato que pode estar vindo do m√©todo novo (linha corrida)
const textoMetodoNovo = `16/SET/2016 V√ÅLIDA EM TODO O TERRIT√ìRIO NACIONAL REGISTRO 7.753.319 GERAL NOME FILIA√á√ÉO DATA DE EXPEDI√á√ÉO JULIANA COSTA DA SILVA SERGIO LUIZ ALVES DA SILVA MARA REGINA COSTA DA SILVA NATURALIDADE DATA DE NASCIMENTO PORTO ALEGRE RS DOC. ORIGEM 11/11/1984`;

console.log('üìä COMPARA√á√ÉO DE FORMATOS:\n');

console.log('üîπ M√âTODO ANTIGO (com quebras de linha):');
console.log('Linhas:', textoMetodoAntigo.split('\n').length);
console.log('Caracteres:', textoMetodoAntigo.length);
console.log('Primeiro trecho:', textoMetodoAntigo.substring(0, 100) + '...\n');

console.log('üîπ M√âTODO NOVO (linha corrida):');
console.log('Linhas:', textoMetodoNovo.split('\n').length);
console.log('Caracteres:', textoMetodoNovo.length);
console.log('Primeiro trecho:', textoMetodoNovo.substring(0, 100) + '...\n');

console.log('üîç TESTE DE PADR√ïES DE EXTRA√á√ÉO:\n');

// Testar padr√µes de nome com ambos os formatos
const patterns = [
  {
    name: 'Nome ap√≥s NOME (com quebra)',
    regex: /NOME\s*\n\s*([A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á\s]+)/i
  },
  {
    name: 'Nome ap√≥s NOME (sem quebra)',
    regex: /NOME\s+([A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á\s]+?)(?:\s+[A-Z]{2,})/i
  },
  {
    name: 'Nome antes FILIA√á√ÉO (com quebra)',
    regex: /([A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á\s]{10,50})\s*\n\s*FILIA√á√ÉO/i
  },
  {
    name: 'Nome antes FILIA√á√ÉO (sem quebra)',
    regex: /([A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á\s]{10,50})\s+FILIA√á√ÉO/i
  }
];

patterns.forEach(pattern => {
  console.log(`\n${pattern.name}:`);
  
  const matchAntigo = textoMetodoAntigo.match(pattern.regex);
  const matchNovo = textoMetodoNovo.match(pattern.regex);
  
  console.log(`  M√©todo antigo: ${matchAntigo ? `"${matchAntigo[1]}"` : 'Sem match'}`);
  console.log(`  M√©todo novo: ${matchNovo ? `"${matchNovo[1]}"` : 'Sem match'}`);
});

console.log('\nüí° CONCLUS√ïES:');
console.log('1. Quebras de linha facilitam identifica√ß√£o de campos isolados');
console.log('2. Texto corrido dificulta separa√ß√£o entre campos');
console.log('3. Padr√µes regex precisam ser adaptados para cada formato');
console.log('4. M√©todo antigo pode estar usando API diferente ou p√≥s-processamento');

console.log('\nüéØ RECOMENDA√á√ïES:');
console.log('1. Verificar qual API OCR cada m√©todo est√° usando');
console.log('2. Comparar par√¢metros de formata√ß√£o das APIs');
console.log('3. Adicionar normaliza√ß√£o de texto se necess√°rio');
console.log('4. Manter padr√µes h√≠bridos para ambos os formatos');