/**
 * Teste completo das corre√ß√µes implementadas
 * Valida detec√ß√£o de documentos e extra√ß√£o de nomes
 */

// Simular textos OCR dos RGs reais
const textoRGDaniel = `REPUBLICA FEDERATIVA DO BRASIL ESTADO DE SAO PAULO SECRETARIA DA SEGURANCA PUBLICA REGISTRO GERAL 123456789 NOME DANIEL COELHO DA COSTA FILIACAO ROSA COELHO DA COSTA EDIVALDO DA COSTA NATURALIDADE SAO PAULO - SP DOC. ORIGEM SAO PAULO - SP CPF XXXXXXXXXXX CARTORIO XXXXX 342.002.171-42 ASSINATURA DO DIRETOR LEIN 7.116 DE 29/08/88 XXX DATA DE NASCIMENTO 19/DEZ/1980 XXXXXX`;

const textoRGJuliana = `16/SET/2016 V√ÅLIDA EM TODO O TERRIT√ìRIO NACIONAL REGISTRO 7.753.319 GERAL NOME FILIA√á√ÉO DATA DE EXPEDI√á√ÉO JULIANA COSTA DA SILVA SERGIO LUIZ ALVES DA SILVA MARA REGINA COSTA DA SILVA NATURALIDADE DATA DE NASCIMENTO PORTO ALEGRE RS DOC. ORIGEM 11/11/1984 CERT. NASC. 72586 LV A-182 FL 119 a CART. 4¬™ ZONA-PORTO ALEGRE RS CPF 010.249.990-09 S√ÉO JOS√â - SC PAULO HENRIQUE DOS SANTOS Perito Criminal Diretor do Instituto de Identifica√ß√£o - IGP/SC ASSINATURA DO DIRETOR LEI N¬∫ 7.116 DE 29/08/83`;

// Simular DocumentTypeDetector corrigido
function testDocumentTypeDetector() {
  console.log('üß™ TESTE DE DETEC√á√ÉO DE TIPO DE DOCUMENTO');
  console.log('='.repeat(60));
  
  function detectDocumentType(text) {
    const normalizedText = text.toUpperCase().replace(/\s+/g, ' ');
    
    // Padr√µes RG corrigidos
    const rgPatterns = [
      /REP√öBLICA FEDERATIVA DO BRASIL/,
      /CARTEIRA DE IDENTIDADE/,
      /REGISTRO GERAL/,
      /REGISTRO\s+\d+/,
      /SECRETARIA DA SEGURAN√áA P√öBLICA/,
      /INSTITUTO DE IDENTIFICA√á√ÉO/,
      /SSP|DETRAN|IGP/,
      /PROIBIDO PLASTIFICAR/,
      /V√ÅLIDA EM TODO O TERRIT√ìRIO NACIONAL/,
      /FILIA√á√ÉO/,
      /NATURALIDADE/,
      /DOC\.\s*ORIGEM/,
      /DATA\s+DE\s+NASCIMENTO/,
      /EXPEDI√á√ÉO/,
      /\b\d{1,2}\/[A-Z]{3}\/\d{4}\b/,
      /CPF\s+\d{3}\.\d{3}\.\d{3}-\d{2}/,
      /ASSINATURA DO DIRETOR/,
      /LEI\s+N[¬∫¬™]?\s*\d+/,
    ];
    
    console.log('üîç Testando padr√µes de RG:');
    const rgMatchingPatterns = [];
    rgPatterns.forEach((pattern, index) => {
      const match = pattern.test(normalizedText);
      console.log(`${index + 1}. ${pattern} ‚Üí ${match ? '‚úÖ' : '‚ùå'}`);
      if (match) rgMatchingPatterns.push(pattern.toString());
    });
    
    const rgMatches = rgMatchingPatterns.length;
    console.log(`üìä RG matches: ${rgMatches} de ${rgPatterns.length}`);
    
    if (rgMatches >= 2) {
      const confidence = Math.min(0.95, 0.6 + (rgMatches * 0.05));
      console.log(`‚úÖ DETECTADO COMO RG_IDENTITY com ${confidence.toFixed(2)} confian√ßa`);
      return {
        type: 'RG_IDENTITY',
        confidence
      };
    }
    
    console.log('‚ùå N√£o detectado como RG');
    return {
      type: 'UNKNOWN',
      confidence: 0.1
    };
  }
  
  // Testar RG Daniel
  console.log('\nüìÑ TESTE: RG Daniel (S√£o Paulo)');
  console.log('-'.repeat(40));
  const resultDaniel = detectDocumentType(textoRGDaniel);
  console.log(`Resultado: ${resultDaniel.type} (${(resultDaniel.confidence * 100).toFixed(1)}%)`);
  
  // Testar RG Juliana
  console.log('\nüìÑ TESTE: RG Juliana (Santa Catarina)');
  console.log('-'.repeat(40));
  const resultJuliana = detectDocumentType(textoRGJuliana);
  console.log(`Resultado: ${resultJuliana.type} (${(resultJuliana.confidence * 100).toFixed(1)}%)`);
  
  return { daniel: resultDaniel, juliana: resultJuliana };
}

// Simular extra√ß√£o de nomes corrigida
function testNameExtraction() {
  console.log('\n\nüß™ TESTE DE EXTRA√á√ÉO DE NOMES CORRIGIDA');
  console.log('='.repeat(60));
  
  function extractName(text) {
    const nomePatterns = [
      // Padr√£o 1: NOME seguido de nome completo at√© FILIACAO (mais restritivo)
      /NOME\s+([A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á]+(?:\s+[A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á]+){1,4})\s+FILIACAO/i,
      // Padr√£o 2: NOME seguido de nome at√© quebra de linha ou campo espec√≠fico
      /NOME[\s\n]+([A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á\s]{10,60}?)(?:\s+FILIACAO|\s+NATURALIDADE|\s+DATA|\n)/i,
      // Padr√£o 3: Para estrutura com campos em linhas separadas
      /NOME[\s\n]+FILIA√á√ÉO[\s\n]+DATA DE[\s\n]+EXPEDI√á√ÉO[\s\n]+([A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á\s]+?)[\s\n]+/i,
      // Padr√£o 4: Busca por linha ap√≥s "EXPEDI√á√ÉO"  
      /EXPEDI√á√ÉO[\s\n]+([A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á\s]{10,50}?)[\s\n]+[A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á\s]+[\s\n]+[A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á\s]+/i,
      // Padr√£o 5: Busca mais conservadora
      /NOME\s+([A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á]+\s+[A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á]+(?:\s+[A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á]+)?)\s/i
    ];
    
    for (const pattern of nomePatterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const cleanName = match[1].trim();
        // Verificar se √© um nome v√°lido
        if (cleanName.length > 5 && 
            cleanName.length < 60 &&
            !cleanName.match(/FILIACAO|NATURALIDADE|DATA|REGISTRO|GERAL|CPF|EXPEDI√á√ÉO/i) &&
            cleanName.split(' ').length >= 2) {
          return cleanName;
        }
      }
    }
    
    // Buscar nome na linha seguinte ap√≥s "EXPEDI√á√ÉO" (espec√≠fico para Juliana) - vers√£o mais robusta
    const expeditionPatterns = [
      /EXPEDI√á√ÉO[\s\n]+([A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á\s]+?)[\s\n]+[A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á\s]+[\s\n]+[A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á\s]+/i,
      /EXPEDI√á√ÉO[\s\n]+([A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á]+(?:\s+[A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á]+){2,4})[\s\n]/i,
      /EXPEDI√á√ÉO[\s\n]+([A-Z√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á\s]{15,50}?)[\s\n]/i
    ];
    
    for (const pattern of expeditionPatterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const name = match[1].trim();
        if (name.length > 5 && 
            name.length < 60 &&
            !name.match(/FILIACAO|NATURALIDADE|DATA|REGISTRO|GERAL|CPF|EXPEDI√á√ÉO/i) &&
            name.split(' ').length >= 2) {
          return name;
        }
      }
    }
    
    return null;
  }
  
  // Testar extra√ß√£o Daniel
  console.log('\nüìÑ TESTE: Extra√ß√£o de Nome - Daniel');
  console.log('-'.repeat(40));
  const nomeDaniel = extractName(textoRGDaniel);
  console.log(`Nome extra√≠do: "${nomeDaniel}"`);
  console.log(`Esperado: "DANIEL COELHO DA COSTA"`);
  console.log(`Status: ${nomeDaniel === 'DANIEL COELHO DA COSTA' ? '‚úÖ CORRETO' : '‚ùå INCORRETO'}`);
  
  // Testar extra√ß√£o Juliana
  console.log('\nüìÑ TESTE: Extra√ß√£o de Nome - Juliana');
  console.log('-'.repeat(40));
  const nomeJuliana = extractName(textoRGJuliana);
  console.log(`Nome extra√≠do: "${nomeJuliana}"`);
  console.log(`Esperado: "JULIANA COSTA DA SILVA"`);
  console.log(`Status: ${nomeJuliana === 'JULIANA COSTA DA SILVA' ? '‚úÖ CORRETO' : '‚ùå INCORRETO'}`);
  
  return { daniel: nomeDaniel, juliana: nomeJuliana };
}

// Executar todos os testes
function runAllTests() {
  console.log('üéØ EXECU√á√ÉO COMPLETA DOS TESTES DE CORRE√á√ÉO');
  console.log('='.repeat(80));
  
  // Teste 1: Detec√ß√£o de tipo de documento
  const detectionResults = testDocumentTypeDetector();
  
  // Teste 2: Extra√ß√£o de nomes
  const nameResults = testNameExtraction();
  
  // Resumo final
  console.log('\n\nüìã RESUMO FINAL DOS TESTES');
  console.log('='.repeat(60));
  
  const danielDetected = detectionResults.daniel.type === 'RG_IDENTITY';
  const julianaDetected = detectionResults.juliana.type === 'RG_IDENTITY';
  const danielNameCorrect = nameResults.daniel === 'DANIEL COELHO DA COSTA';
  const julianaNameCorrect = nameResults.juliana === 'JULIANA COSTA DA SILVA';
  
  console.log('üîç DETEC√á√ÉO DE DOCUMENTOS:');
  console.log(`   Daniel (SP): ${danielDetected ? '‚úÖ RG_IDENTITY' : '‚ùå N√£o detectado'}`);
  console.log(`   Juliana (SC): ${julianaDetected ? '‚úÖ RG_IDENTITY' : '‚ùå N√£o detectado'}`);
  
  console.log('\nüìù EXTRA√á√ÉO DE NOMES:');
  console.log(`   Daniel: ${danielNameCorrect ? '‚úÖ Correto' : '‚ùå Incorreto'}`);
  console.log(`   Juliana: ${julianaNameCorrect ? '‚úÖ Correto' : '‚ùå Incorreto'}`);
  
  const allTestsPassed = danielDetected && julianaDetected && danielNameCorrect && julianaNameCorrect;
  
  console.log('\nüéØ RESULTADO GERAL:');
  console.log(`${allTestsPassed ? '‚úÖ TODOS OS TESTES APROVADOS' : '‚ùå ALGUNS TESTES FALHARAM'}`);
  
  if (allTestsPassed) {
    console.log('\nüöÄ SISTEMA PRONTO PARA TESTE REAL:');
    console.log('   ‚Ä¢ Ambos os RGs ser√£o detectados como RG_IDENTITY');
    console.log('   ‚Ä¢ Nova arquitetura ser√° usada para ambos');
    console.log('   ‚Ä¢ Nomes ser√£o extra√≠dos corretamente');
    console.log('   ‚Ä¢ N√£o haver√° tentativa de identificar operadoras');
  } else {
    console.log('\n‚ö†Ô∏è A√á√ïES NECESS√ÅRIAS:');
    if (!danielDetected) console.log('   ‚Ä¢ Corrigir detec√ß√£o do RG Daniel');
    if (!julianaDetected) console.log('   ‚Ä¢ Corrigir detec√ß√£o do RG Juliana');
    if (!danielNameCorrect) console.log('   ‚Ä¢ Corrigir extra√ß√£o de nome do Daniel');
    if (!julianaNameCorrect) console.log('   ‚Ä¢ Corrigir extra√ß√£o de nome da Juliana');
  }
}

runAllTests();